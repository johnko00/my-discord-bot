// ÂøÖË¶Å„Å™„É©„Ç§„Éñ„É©„É™„ÇíË™≠„ÅøËæº„Åø
const { Client, GatewayIntentBits, EmbedBuilder } = require('discord.js');
const { REST } = require('@discordjs/rest');
const { Routes } = require('discord-api-types/v10');
require('dotenv').config(); // .env„Éï„Ç°„Ç§„É´„ÇíË™≠„ÅøËæº„Åø

// „Éú„ÉÉ„Éà„ÇØ„É©„Ç§„Ç¢„É≥„Éà„ÅÆ‰ΩúÊàê
const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,           // „Çµ„Éº„Éê„ÉºÊÉÖÂ†±„ÅÆÂèñÂæó
        GatewayIntentBits.GuildMessages,    // „É°„ÉÉ„Çª„Éº„Ç∏„ÅÆË™≠„ÅøÂèñ„Çä
        GatewayIntentBits.MessageContent    // „É°„ÉÉ„Çª„Éº„Ç∏ÂÜÖÂÆπ„ÅÆË™≠„ÅøÂèñ„Çä
    ]
});

// „Çπ„É©„ÉÉ„Ç∑„É•„Ç≥„Éû„É≥„Éâ„ÅÆÂÆöÁæ©
const commands = [
    {
        name: 'ping',
        description: '„Éú„ÉÉ„Éà„ÅÆÂøúÁ≠îÈÄüÂ∫¶„ÇíÁ¢∫Ë™ç„Åó„Åæ„Åô'
    },
    {
        name: 'hello',
        description: 'Êå®Êã∂„Çí„Åó„Åæ„Åô',
        options: [
            {
                name: 'user',
                description: 'Êå®Êã∂„Åô„ÇãÁõ∏Êâã„ÇíÈÅ∏ÊäûÔºàÁúÅÁï•ÂèØËÉΩÔºâ',
                type: 6, // USER type
                required: false
            }
        ]
    },
    {
        name: 'serverinfo',
        description: '„Çµ„Éº„Éê„Éº„ÅÆÊÉÖÂ†±„ÇíË°®Á§∫„Åó„Åæ„Åô'
    }
];

// „Éú„ÉÉ„ÉàËµ∑ÂãïÊôÇ„ÅÆÂá¶ÁêÜ
client.once('ready', async () => {
    console.log(`‚úÖ ${client.user.tag} „Åå„Ç™„É≥„É©„Ç§„É≥„Å´„Å™„Çä„Åæ„Åó„ÅüÔºÅ`);
    console.log(`üîó ${client.guilds.cache.size}ÂÄã„ÅÆ„Çµ„Éº„Éê„Éº„Å´Êé•Á∂ö‰∏≠`);
    
    // „Çπ„É©„ÉÉ„Ç∑„É•„Ç≥„Éû„É≥„Éâ„ÇíÁôªÈå≤
    const rest = new REST({ version: '10' }).setToken(process.env.BOT_TOKEN);
    
    try {
        console.log('üîÑ „Çπ„É©„ÉÉ„Ç∑„É•„Ç≥„Éû„É≥„Éâ„ÇíÁôªÈå≤‰∏≠...');
        
        // „Åô„Åπ„Å¶„ÅÆ„Çµ„Éº„Éê„Éº„Å´„Ç≥„Éû„É≥„Éâ„ÇíÁôªÈå≤
        await rest.put(
            Routes.applicationCommands(client.user.id),
            { body: commands }
        );
        
        console.log('‚úÖ „Çπ„É©„ÉÉ„Ç∑„É•„Ç≥„Éû„É≥„Éâ„ÅÆÁôªÈå≤ÂÆå‰∫ÜÔºÅ');
    } catch (error) {
        console.error('‚ùå „Ç≥„Éû„É≥„ÉâÁôªÈå≤„Ç®„É©„Éº:', error);
    }
});

// „Çπ„É©„ÉÉ„Ç∑„É•„Ç≥„Éû„É≥„Éâ„ÅåÂÆüË°å„Åï„Çå„ÅüÊôÇ„ÅÆÂá¶ÁêÜ
client.on('interactionCreate', async interaction => {
    // „Çπ„É©„ÉÉ„Ç∑„É•„Ç≥„Éû„É≥„Éâ‰ª•Â§ñ„ÅØÁÑ°Ë¶ñ
    if (!interaction.isChatInputCommand()) return;

    const { commandName } = interaction;

    try {
        switch (commandName) {
            case 'ping':
                // „Éú„ÉÉ„Éà„ÅÆÂøúÁ≠îÈÄüÂ∫¶„ÇíÊ∏¨ÂÆö
                const ping = client.ws.ping;
                await interaction.reply(`üèì Pong! „É¨„Ç§„ÉÜ„É≥„Ç∑: ${ping}ms`);
                break;
                
            case 'hello':
                // Êå®Êã∂„Ç≥„Éû„É≥„Éâ
                const user = interaction.options.getUser('user');
                const message = user 
                    ? `üëã „Åì„Çì„Å´„Å°„ÅØ„ÄÅ${user}„Åï„ÇìÔºÅ` 
                    : `üëã „Åì„Çì„Å´„Å°„ÅØ„ÄÅ${interaction.user}„Åï„ÇìÔºÅ`;
                await interaction.reply(message);
                break;
                
            case 'serverinfo':
                // „Çµ„Éº„Éê„ÉºÊÉÖÂ†±„ÇíË°®Á§∫
                const guild = interaction.guild;
                const embed = new EmbedBuilder()
                    .setColor(0x0099ff)
                    .setTitle('üìä „Çµ„Éº„Éê„ÉºÊÉÖÂ†±')
                    .setThumbnail(guild.iconURL())
                    .addFields(
                        { name: 'üè∑Ô∏è „Çµ„Éº„Éê„ÉºÂêç', value: guild.name, inline: true },
                        { name: 'üë• „É°„É≥„Éê„ÉºÊï∞', value: guild.memberCount.toString(), inline: true },
                        { name: 'üìÖ ‰ΩúÊàêÊó•', value: guild.createdAt.toLocaleDateString('ja-JP'), inline: true },
                        { name: 'üé≠ „É≠„Éº„É´Êï∞', value: guild.roles.cache.size.toString(), inline: true },
                        { name: 'üì∫ „ÉÅ„É£„É≥„Éç„É´Êï∞', value: guild.channels.cache.size.toString(), inline: true }
                    )
                    .setTimestamp();
                    
                await interaction.reply({ embeds: [embed] });
                break;
                
            default:
                await interaction.reply('‚ùå Êú™Áü•„ÅÆ„Ç≥„Éû„É≥„Éâ„Åß„Åô„ÄÇ');
        }
    } catch (error) {
        console.error('„Ç≥„Éû„É≥„ÉâÂÆüË°å„Ç®„É©„Éº:', error);
        
        // „Ç®„É©„Éº„É¨„Çπ„Éù„É≥„Çπ
        if (interaction.replied) {
            await interaction.followUp('‚ùå „Ç≥„Éû„É≥„Éâ„ÅÆÂÆüË°å‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ');
        } else {
            await interaction.reply('‚ùå „Ç≥„Éû„É≥„Éâ„ÅÆÂÆüË°å‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ');
        }
    }
});

// „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞
client.on('error', error => {
    console.error('‚ùå Discord„ÇØ„É©„Ç§„Ç¢„É≥„Éà„Ç®„É©„Éº:', error);
});

// „Éó„É≠„Çª„Çπ„Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞
process.on('uncaughtException', error => {
    console.error('‚ùå ‰∫àÊúü„Åó„Å™„ÅÑ„Ç®„É©„Éº:', error);
});

process.on('unhandledRejection', error => {
    console.error('‚ùå Âá¶ÁêÜ„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑPromiseÊãíÂê¶:', error);
});

// „Éú„ÉÉ„Éà„Å´„É≠„Ç∞„Ç§„É≥
console.log('üöÄ „Éú„ÉÉ„Éà„ÇíËµ∑Âãï‰∏≠...');
client.login(process.env.BOT_TOKEN);


// „Éú„ÉÉ„ÉàËµ∑ÂãïÊôÇ„ÅÆÂá¶ÁêÜ„Çí‰ª•‰∏ã„Å´Â§âÊõ¥
client.once('ready', async () => {
    console.log(`‚úÖ ${client.user.tag} „Åå„Ç™„É≥„É©„Ç§„É≥„Å´„Å™„Çä„Åæ„Åó„ÅüÔºÅ`);
    
    const rest = new REST({ version: '10' }).setToken(process.env.BOT_TOKEN);
    
    try {
        console.log('üóëÔ∏è Âè§„ÅÑ„Ç≥„Éû„É≥„Éâ„ÇíÂâäÈô§‰∏≠...');
        
        // ÂÖ®„Å¶„ÅÆ„Ç∞„É≠„Éº„Éê„É´„Ç≥„Éû„É≥„Éâ„ÇíÂâäÈô§
        await rest.put(
            Routes.applicationCommands(client.user.id),
            { body: [] }
        );
        
        console.log('‚úÖ Âè§„ÅÑ„Ç≥„Éû„É≥„ÉâÂâäÈô§ÂÆå‰∫ÜÔºÅ');
        console.log('üîÑ Êñ∞„Åó„ÅÑ„Ç≥„Éû„É≥„Éâ„ÇíÁôªÈå≤‰∏≠...');
        
        // Êñ∞„Åó„ÅÑ„Ç≥„Éû„É≥„Éâ„ÇíÁôªÈå≤
        await rest.put(
            Routes.applicationCommands(client.user.id),
            { body: commands }
        );
        
        console.log('‚úÖ Êñ∞„Åó„ÅÑ„Ç≥„Éû„É≥„ÉâÁôªÈå≤ÂÆå‰∫ÜÔºÅ');
    } catch (error) {
        console.error('‚ùå „Ç≥„Éû„É≥„ÉâÂá¶ÁêÜ„Ç®„É©„Éº:', error);
    }
});

// RenderÁî®„ÅÆWeb„Çµ„Éº„Éê„ÉºÔºà„Éù„Éº„Éà„Éê„Ç§„É≥„ÉâÂØæÂøúÔºâ
const express = require('express');
const app = express();
const PORT = process.env.PORT || 3000;

app.get('/', (req, res) => {
    res.json({
        status: 'Bot is running!',
        botName: client.user?.tag || 'Bot',
        servers: client.guilds.cache.size,
        uptime: process.uptime()
    });
});

app.get('/health', (req, res) => {
    res.json({ status: 'OK', timestamp: new Date().toISOString() });
});

app.listen(PORT, () => {
    console.log(`üåê Server running on port ${PORT}`);
});

// RenderÁî®„ÅÆWeb„Çµ„Éº„Éê„ÉºÔºà„Éù„Éº„Éà„Éê„Ç§„É≥„ÉâÂØæÂøúÔºâ
const express = require('express');
const app = express();
const PORT = process.env.PORT || 3000;

app.get('/', (req, res) => {
    res.json({
        status: 'Bot is running!',
        botName: client.user?.tag || 'Bot',
        servers: client.guilds.cache.size,
        uptime: process.uptime()
    });
});

app.get('/health', (req, res) => {
    res.json({ status: 'OK', timestamp: new Date().toISOString() });
});

// „Çµ„Éº„Éê„ÉºËµ∑ÂãïÔºà„Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞‰ªò„ÅçÔºâ
const server = app.listen(PORT, () => {
    console.log(`üåê Server running on port ${PORT}`);
}).on('error', (err) => {
    if (err.code === 'EADDRINUSE') {
        console.log(`‚ö†Ô∏è Port ${PORT} is already in use. Trying port ${PORT + 1}...`);
        server.listen(PORT + 1);
    } else {
        console.error('‚ùå Server error:', err);
    }
});